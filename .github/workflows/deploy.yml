name: CI/CD for Microservices

on:
  push:
    branches: [ main ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      game: ${{ steps.filter.outputs.game }}
      analytics: ${{ steps.filter.outputs.analytics }}
      order: ${{ steps.filter.outputs.order }}
    steps:
      - uses: actions/checkout@v3

      - name: Detect which service changed
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            game:
              - 'game-service/**'
            analytics:
              - 'analytics-service/**'
            order:
              - 'order-service/**'

  deploy-game:
    needs: detect-changes
    if: needs.detect-changes.outputs.game == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push game-service
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t shalini1772/game-service:$IMAGE_TAG ./game-service
          docker push shalini1772/game-service:$IMAGE_TAG

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region "${{ secrets.AWS_REGION }}"

      - name: Decode and export kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig

      - name: Update game-service Deployment and restart
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          kubectl create namespace game --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f game-service/k8s/mysql-deployment.yaml -n game
          kubectl apply -f game-service/k8s/game-ingress.yaml -n game
          kubectl set image deployment/game-service game-service=shalini1772/game-service:${{ github.sha }} -n game
          kubectl rollout restart deployment/game-service -n game

  deploy-analytics:
    needs: detect-changes
    if: needs.detect-changes.outputs.analytics == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push analytics-service
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t shalini1772/analytics-service:$IMAGE_TAG ./analytics-service
          docker push shalini1772/analytics-service:$IMAGE_TAG

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region "${{ secrets.AWS_REGION }}"

      - name: Decode and export kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig

      - name: Update analytics-service Deployment and restart
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          kubectl create namespace analytics --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f analytics-service/k8s/analytics-ingress.yaml -n analytics
          kubectl set image deployment/analytics-service analytics-service=shalini1772/analytics-service:${{ github.sha }} -n analytics
          kubectl rollout restart deployment/analytics-service -n analytics

  deploy-order:
    needs: detect-changes
    if: needs.detect-changes.outputs.order == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push order-service
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t shalini1772/order-service:$IMAGE_TAG ./order-service
          docker push shalini1772/order-service:$IMAGE_TAG

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region "${{ secrets.AWS_REGION }}"

      - name: Decode and export kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig

      - name: Update order-service Deployment and restart
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          kubectl create namespace order --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f order-service/k8s/mysql-deployment.yaml -n order
          kubectl apply -f order-service/k8s/order-ingress.yaml -n order
          kubectl set image deployment/order-service order-service=shalini1772/order-service:${{ github.sha }} -n order
          kubectl rollout restart deployment/order-service -n order
