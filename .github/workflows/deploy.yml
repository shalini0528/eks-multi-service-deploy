name: CI/CD for Microservices and Static Website (Blue-Green)

on:
  push:
    branches: [ main ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      game: ${{ steps.filter.outputs.game }}
      analytics: ${{ steps.filter.outputs.analytics }}
      order: ${{ steps.filter.outputs.order }}
      static: ${{ steps.filter.outputs.static }}
    steps:
      - uses: actions/checkout@v3

      - name: Detect changed services
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            game:
              - 'game-service/**'
            analytics:
              - 'analytics-service/**'
            order:
              - 'order-service/**'
            static:
              - 'templatemo_589_lugx_gaming/**'

  deploy-game:
    needs: detect-changes
    if: needs.detect-changes.outputs.game == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies & run tests
        run: |
          cd game-service
          npm ci
          npm test

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push game-service image
        run: |
          IMAGE_TAG=${{ github.sha }}
          cd game-service
          docker build --no-cache -t shalini1772/game-service:$IMAGE_TAG .
          docker push shalini1772/game-service:$IMAGE_TAG

      - name: Configure AWS CLI & kubeconfig
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region "${{ secrets.AWS_REGION }}"
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV

      - name: Detect current live color
        id: color
        run: |
          if kubectl get svc game-service-green -n game &>/dev/null; then
            echo "color=blue" >> $GITHUB_OUTPUT
          else
            echo "color=green" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to inactive color
        env:
          IMAGE_TAG: ${{ github.sha }}
          COLOR: ${{ steps.color.outputs.color }}
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          envsubst < game-service/k8s/game-service-$COLOR-deployment.yaml | kubectl apply -n game -f -
          kubectl rollout status deployment/game-service-$COLOR -n game

      - name: Ensure LoadBalancer service exists
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          if ! kubectl get svc game-service -n game &>/dev/null; then
            kubectl apply -n game -f game-service/k8s/game-service-lb.yaml
          fi

      - name: Patch game-service LoadBalancer selector
        env:
          COLOR: ${{ steps.color.outputs.color }}
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          kubectl patch svc game-service -n game -p "{\"spec\": {\"selector\": {\"app\": \"game-service\", \"version\": \"$COLOR\"}}}"

      - name: Update Ingress to point to new color
        env:
          COLOR: ${{ steps.color.outputs.color }}
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          sed "s/{{COLOR}}/$COLOR/g" game-service/k8s/game-ingress.template.yaml > updated-ingress.yaml
          kubectl apply -n game -f updated-ingress.yaml

      - name: Delete old deployment (optional)
        env:
          COLOR: ${{ steps.color.outputs.color }}
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          if [ "$COLOR" == "green" ]; then
            OLD_COLOR="blue"
          else
            OLD_COLOR="green"
          fi
          kubectl delete deployment game-service-$OLD_COLOR -n game || true
          kubectl delete svc game-service-$OLD_COLOR -n game || true

  deploy-analytics:
    needs: detect-changes
    if: needs.detect-changes.outputs.analytics == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies & run tests
        run: |
          cd analytics-service
          npm ci
          npm test

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push analytics-service image
        run: |
          IMAGE_TAG=${{ github.sha }}
          cd analytics-service
          docker build --no-cache -t shalini1772/analytics-service:$IMAGE_TAG .
          docker push shalini1772/analytics-service:$IMAGE_TAG

      - name: Configure AWS CLI & kubeconfig
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region "${{ secrets.AWS_REGION }}"
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV

      - name: Detect current live color
        id: color
        run: |
          if kubectl get svc analytics-service-green -n analytics &>/dev/null; then
            echo "color=blue" >> $GITHUB_OUTPUT
          else
            echo "color=green" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to inactive color
        env:
          IMAGE_TAG: ${{ github.sha }}
          COLOR: ${{ steps.color.outputs.color }}
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          envsubst < analytics-service/k8s/analytics-service-$COLOR-deployment.yaml | kubectl apply -n analytics -f -
          kubectl rollout status deployment/analytics-service-$COLOR -n analytics

      - name: Ensure LoadBalancer service exists
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          if ! kubectl get svc analytics-service -n analytics &>/dev/null; then
            kubectl apply -n analytics -f analytics-service/k8s/analytics-service-lb.yaml
          fi

      - name: Patch analytics-service LoadBalancer selector
        env:
          COLOR: ${{ steps.color.outputs.color }}
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          kubectl patch svc analytics-service -n analytics -p "{\"spec\": {\"selector\": {\"app\": \"analytics-service\", \"version\": \"$COLOR\"}}}"

      - name: Update Ingress to point to new color
        env:
          COLOR: ${{ steps.color.outputs.color }}
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          sed "s/{{COLOR}}/$COLOR/g" analytics-service/k8s/analytics-ingress.template.yaml > updated-ingress.yaml
          kubectl apply -n analytics -f updated-ingress.yaml

      - name: Delete old deployment (optional)
        env:
          COLOR: ${{ steps.color.outputs.color }}
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          if [ "$COLOR" == "green" ]; then
            OLD_COLOR="blue"
          else
            OLD_COLOR="green"
          fi
          kubectl delete deployment analytics-service-$OLD_COLOR -n analytics || true
          kubectl delete svc analytics-service-$OLD_COLOR -n analytics || true

  deploy-order:
    needs: detect-changes
    if: needs.detect-changes.outputs.order == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies & run tests
        run: |
          cd order-service
          npm ci
          npm test

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push order-service image
        run: |
          IMAGE_TAG=${{ github.sha }}
          cd order-service
          docker build --no-cache -t shalini1772/order-service:$IMAGE_TAG .
          docker push shalini1772/order-service:$IMAGE_TAG

      - name: Configure AWS CLI & kubeconfig
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region "${{ secrets.AWS_REGION }}"
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV

      - name: Detect current live color
        id: color
        run: |
          if kubectl get svc order-service-green -n order &>/dev/null; then
            echo "color=blue" >> $GITHUB_OUTPUT
          else
            echo "color=green" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to inactive color
        env:
          IMAGE_TAG: ${{ github.sha }}
          COLOR: ${{ steps.color.outputs.color }}
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          envsubst < order-service/k8s/order-service-$COLOR-deployment.yaml | kubectl apply -n order -f -
          kubectl rollout status deployment/order-service-$COLOR -n order

      - name: Ensure LoadBalancer service exists
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          if ! kubectl get svc order-service -n order &>/dev/null; then
            kubectl apply -n order -f order-service/k8s/order-service-lb.yaml
          fi

      - name: Patch order-service LoadBalancer selector
        env:
          COLOR: ${{ steps.color.outputs.color }}
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          kubectl patch svc order-service -n order -p "{\"spec\": {\"selector\": {\"app\": \"order-service\", \"version\": \"$COLOR\"}}}"

      - name: Update Ingress to point to new color
        env:
          COLOR: ${{ steps.color.outputs.color }}
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          sed "s/{{COLOR}}/$COLOR/g" order-service/k8s/order-ingress.template.yaml > updated-ingress.yaml
          kubectl apply -n order -f updated-ingress.yaml

      - name: Delete old deployment (optional)
        env:
          COLOR: ${{ steps.color.outputs.color }}
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          if [ "$COLOR" == "green" ]; then
            OLD_COLOR="blue"
          else
            OLD_COLOR="green"
          fi
          kubectl delete deployment order-service-$OLD_COLOR -n order || true
          kubectl delete svc order-service-$OLD_COLOR -n order || true

  deploy-static-site:
    needs: detect-changes
    if: needs.detect-changes.outputs.static == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push static site image
        run: |
          IMAGE_TAG=${{ github.sha }}
          cd templatemo_589_lugx_gaming
          docker build --no-cache -t shalini1772/static-site:$IMAGE_TAG .
          docker push shalini1772/static-site:$IMAGE_TAG

      - name: Configure AWS CLI & kubeconfig
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region "${{ secrets.AWS_REGION }}"
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV

      - name: Deploy static site to EKS
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          kubectl create namespace static --dry-run=client -o yaml | kubectl apply -f -
          kubectl delete pods -l app=static-site -n static --ignore-not-found
          envsubst < templatemo_589_lugx_gaming/k8s/static-site-deployment.yaml | kubectl apply -n static -f -
          kubectl apply -f templatemo_589_lugx_gaming/k8s/static-ingress.yaml -n static
          kubectl rollout status deployment/static-site -n static
